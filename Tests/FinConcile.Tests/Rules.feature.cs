// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FinConcile.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Rules")]
    public partial class RulesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Rules.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Rules", "\tIn order to match transactions\r\n\tAs a user\r\n\tI want to define custom rules", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Define PropertyFuzzyMatchRule to fuzzy string match two string fields")]
        [NUnit.Framework.CategoryAttribute("rules")]
        public virtual void DefinePropertyFuzzyMatchRuleToFuzzyStringMatchTwoStringFields()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Define PropertyFuzzyMatchRule to fuzzy string match two string fields", new string[] {
                        "rules"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "sourceproperty",
                        "targetproperty",
                        "levenshteidistance"});
            table1.AddRow(new string[] {
                        "Narrative",
                        "Narrative",
                        "1"});
#line 8
 testRunner.Given("I have a Rule", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "ProfileName",
                        "Date",
                        "Amount",
                        "Narrative",
                        "Description",
                        "WalletReference",
                        "Type"});
            table2.AddRow(new string[] {
                        "584011808649511",
                        "Card Campaign",
                        "1/11/2014  10:27:00 PM",
                        "-20000",
                        "*MOLEPS ATM25             MOLEPOLOLE    BW",
                        "DEDUCT",
                        "P_NzI2ODY2ODlfMTM4MjcwMTU2NS45MzA5",
                        "1"});
            table2.AddRow(new string[] {
                        "584011808649511",
                        "Card Campaign",
                        "1/11/2014  10:27:00 PM",
                        "20000",
                        "*MOLEPS ATM25             MOLEPOLOLE    BW",
                        "REVERSAL",
                        "P_NzI2ODY2ODlfMTM4MjcwMTU2NS45MzA5",
                        "1"});
#line 11
 testRunner.And("A list of client transactions to match", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "ProfileName",
                        "Date",
                        "Amount",
                        "Narrative",
                        "Description",
                        "WalletReference",
                        "Type"});
            table3.AddRow(new string[] {
                        "584011808649511",
                        "Card Campaign",
                        "1/11/2014  10:27:00 PM",
                        "-20000",
                        "*MLPS ATM25             MOLEPOLOLE    BW",
                        "DEDUCT",
                        "P_NzI2ODY2ODlfMTM4MjcwMTU2NS45MzA5",
                        "1"});
            table3.AddRow(new string[] {
                        "584011808649511",
                        "Card Campaign",
                        "1/11/2014  10:27:00 PM",
                        "20000",
                        "*MOLEPS ATM25             MOLEPOLOLE    BW",
                        "REVERSAL",
                        "P_NzI2ODY2ODlfMTM4MjcwMTU2NS45MzA5",
                        "1"});
#line 15
 testRunner.And("a list of tutuka transactions slightly different descriptions", ((string)(null)), table3, "And ");
#line 19
 testRunner.When("I call evaluate for each transactions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("the result should be matched ReconciledItem", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
